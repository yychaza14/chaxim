name: Bybit and binance P2P Data Collection

on:
  schedule:
    # Run every hour
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  collect-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly grant write permission
      pages: write
       id-token: write
    

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        # Use token with write permissions
        token: ${{ secrets.PAT }}
        

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install Chrome and ChromeDriver
      run: |
        # Install or update Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/google.gpg
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable || echo "Chrome is already installed"
          
        # Install matching ChromeDriver version
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1)
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
        
        # Only download and install ChromeDriver if not already present or if version mismatch
        if ! command -v chromedriver &> /dev/null || \
           [[ $(chromedriver --version | cut -d ' ' -f2 | cut -d '.' -f1) != $CHROME_VERSION ]]; then
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip -o chromedriver_linux64.zip
          sudo mv -f chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
        fi
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium requests pandas openpyxl beautifulsoup4
    
    - name: Run scraper
      run: python main.py
              # Convert SQLite data to JSON for web display
        python -c "
import sqlite3
import json
from datetime import datetime

# Connect to SQLite database
conn = sqlite3.connect('pb2b/p2p_listings.db')
cursor = conn.cursor()

# Retrieve recent listings
def fetch_listings(table):
    cursor.execute(f'SELECT * FROM {table} ORDER BY timestamp DESC LIMIT 20')
    columns = [column[0] for column in cursor.description]
    return [dict(zip(columns, row)) for row in cursor.fetchall()]

# Retrieve exchange rates
cursor.execute('SELECT * FROM exchange_rates ORDER BY timestamp DESC LIMIT 10')
columns = [column[0] for column in cursor.description]
exchange_rates = [dict(zip(columns, row)) for row in cursor.fetchall()]

# Prepare data dictionary
data = {
    'bybit_listings': fetch_listings('bybit_listings'),
    'binance_listings': fetch_listings('binance_listings'),
    'exchange_rates': exchange_rates,
    'last_updated': datetime.now().isoformat()
}

# Write to JSON file
with open('index.json', 'w') as f:
    json.dump(data, f, indent=2)
"
    
    - name: Generate HTML Report
      run: |
        cat > index.html << EOL
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>P2P Market Data</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        </head>
        <body>
            <div class="container mt-5">
                <h1 class="text-center mb-4">P2P Market Data Dashboard</h1>
                
                <div class="row">
                    <div class="col-md-6">
                        <h3>Bybit Listings</h3>
                        <table class="table" id="bybitTable">
                            <thead>
                                <tr>
                                    <th>Price</th>
                                    <th>Available Amount</th>
                                    <th>Payment Methods</th>
                                </tr>
                            </thead>
                            <tbody id="bybitListings"></tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h3>Binance Listings</h3>
                        <table class="table" id="binanceTable">
                            <thead>
                                <tr>
                                    <th>Price</th>
                                    <th>Available Amount</th>
                                    <th>Payment Methods</th>
                                </tr>
                            </thead>
                            <tbody id="binanceListings"></tbody>
                        </table>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-12">
                        <h3>Exchange Rates</h3>
                        <canvas id="exchangeRateChart"></canvas>
                    </div>
                </div>
            </div>

            <script>
                fetch('index.json')
                    .then(response => response.json())
                    .then(data => {
                        // Populate Bybit Listings
                        const bybitListings = document.getElementById('bybitListings');
                        data.bybit_listings.forEach(listing => {
                            const row = \`<tr>
                                <td>\${listing.price}</td>
                                <td>\${listing.available_amount}</td>
                                <td>\${listing.payment_methods}</td>
                            </tr>\`;
                            bybitListings.innerHTML += row;
                        });

                        // Populate Binance Listings
                        const binanceListings = document.getElementById('binanceListings');
                        data.binance_listings.forEach(listing => {
                            const row = \`<tr>
                                <td>\${listing.price}</td>
                                <td>\${listing.available_amount}</td>
                                <td>\${listing.payment_methods}</td>
                            </tr>\`;
                            binanceListings.innerHTML += row;
                        });

                        // Create Exchange Rate Chart
                        const ctx = document.getElementById('exchangeRateChart').getContext('2d');
                        new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: data.exchange_rates.map(rate => rate.timestamp.split('T')[0]),
                                datasets: [{
                                    label: 'Exchange Rate',
                                    data: data.exchange_rates.map(rate => rate.rate),
                                    borderColor: 'rgb(75, 192, 192)',
                                    tension: 0.1
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    title: {
                                        display: true,
                                        text: 'Exchange Rate Trend'
                                    }
                                }
                            }
                        });
                    });
            </script>
        </body>
        </html>
        EOL
      env:
        PYTHONUNBUFFERED: 1
          
    - name: Commit and push if there are changes
      run: |
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Create directories if they don't exist
        mkdir -p pb2b/excel pb2b/json pb2b/screenshots pb2b/logs
        
        # Fetch the latest changes
        git fetch origin main
        
        # Add all new files and changes
        git add -f pb2b/p2p_listings.db  # Specific database file
        git add -f pb2b/excel/*.xlsx
        git add -f pb2b/json/*.json
        git add -f pb2b/screenshots/*.png
        git add -f pb2b/logs/*.log
        
        # Create commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          timestamp=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          git commit -m "Update P2P data: ${timestamp}"
          git push origin main
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
