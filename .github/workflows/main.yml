name: Bybit and Binance P2P Data Collection

on:
  schedule:
    - cron: '*/10 * * * *'  # Run every 10 minutes
  workflow_dispatch:

jobs:
  collect-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install Chrome and ChromeDriver
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/google.gpg
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable || echo "Chrome is already installed"
          
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1)
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
        
        if ! command -v chromedriver &> /dev/null || \
           [[ $(chromedriver --version | cut -d ' ' -f2 | cut -d '.' -f1) != $CHROME_VERSION ]]; then
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip -o chromedriver_linux64.zip
          sudo mv -f chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
        fi
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium requests pandas openpyxl
    
    - name: Run scraper
      run: python main.py
      env:
        PYTHONUNBUFFERED: 1
    
    - name: Commit and push changes
      run: |
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Create directories if they don't exist
        mkdir -p pb2b/{excel,json,screenshots,logs}
        mkdir -p binance_data/{excel,json,logs}
        
        # Function to handle git operations with retry logic
        handle_git_operations() {
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $(($RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            # Reset any changes and clean untracked files
            git reset --hard
            git clean -fd
            
            # Fetch latest changes
            git fetch origin main
            
            # Reset to origin/main
            git reset --hard origin/main
            
            # Stage all new files
            git add -f pb2b/excel/*.xlsx 2>/dev/null || true
            git add -f pb2b/json/*.json 2>/dev/null || true
            git add -f pb2b/screenshots/*.png 2>/dev/null || true
            git add -f pb2b/logs/*.log 2>/dev/null || true
            git add -f binance_data/excel/*.xlsx 2>/dev/null || true
            git add -f binance_data/json/*.json 2>/dev/null || true
            git add -f binance_data/logs/*.log 2>/dev/null || true
            
            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "No changes to commit"
              return 0
            fi
            
            # Create timestamp and commit
            timestamp=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
            git commit -m "Update P2P data ${timestamp}"
            
            # Try to push
            if git push origin main; then
              echo "Successfully pushed changes"
              return 0
            else
              echo "Push failed, retrying..."
              RETRY_COUNT=$(($RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Waiting 10 seconds before retry..."
                sleep 10
              fi
            fi
          done
          
          echo "Failed to push changes after $MAX_RETRIES attempts"
          return 1
        }
        
        # Execute git operations
        handle_git_operations
        exit_code=$?
        
        if [ $exit_code -ne 0 ]; then
          echo "Git operations failed"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
